# log4perl configuration file for Spidey and default for all spiders.

# Available log levels in ascending order of severity:
# Inspired by http://en.wikipedia.org/wiki/log4perl.
#
# TODO: refine this description as you write more spiders and choose the right
# error level to use for logging each exception. It is difficult to think about
# this beforehand.
#
#   TRACE   It is the most verbose debugging level. This is intended to debug
#           the Spidey library itself. Expect these to be written to logs only.
#
#   DEBUG   Detailed information on the flow through the system. Slides are
#           written to the spider cache for easy visual debug. Expect these to
#           be written to logs only.
#
#   INFO    Interesting runtime events. Some important variable values are
#           dumped into the spider cache for you to inspect whether they make
#           sense or not. Expect these to be immediately visible on a console,
#           so be conservative and keep to a minimum.
#
#   WARN    Run-time warnings (non-fatal errors). 'Almost' errors, other
#           runtime situations that are undesirable or unexpected, but not
#           necessarily "wrong". Execution of the spider is not halted. E.g.
#           warnings if some data to extract are missing, at worst there are no
#           results. Expect these to be immediately visible on a status
#           console.
#
#   ERROR   Basic crucial testpoints are executed and logged. This will give an
#           overall picture of the spider operation. These indicate errors that
#           can not be recovered from: the spider is halted beforehand and you
#           will know the first step that failed instead of cryptic Perl errors
#           and warnings. Expect these to be immediately visible on a status
#           console.
#
#   FATAL   No debug output at all for faster code execution. Only Perl
#           run-time warnings and errors are trapped and logged. It may be very
#           difficult to understand what went wrong from such an error. Expect
#           these to be immediately visible on a status console.
#

log4perl.logger.WWW.HtmlUnit.Spidey = TRACE, SPIDEY

log4perl.appender.SPIDEY                          = Log::Log4perl::Appender::File
log4perl.appender.SPIDEY.filename                 = sub { use WWW::HtmlUnit::Spidey {NO_LOG4PERL => 1}; file 'log'; }
log4perl.appender.SPIDEY.layout                   = Log::Log4perl::Layout::PatternLayout
# If you prefer to keep logs of past spider execution use Log4perl default mode "append" and
# rotate your logs either with the Log::Dispatch::FileRotate appender:
# http://log4perl.sourceforge.net/releases/Log-Log4perl/docs/html/Log/Log4perl/FAQ.html#923b3
# or better using Linux newsyslog:
# http://log4perl.sourceforge.net/releases/Log-Log4perl/docs/html/Log/Log4perl/FAQ.html#2d0d0
# If you want to start with a fresh log file every time a spider is run use mode "clobber".
log4perl.appender.SPIDEY.mode                     = append
# Default layout is %m%n - the error message only followed by a newline.
log4perl.appender.SPIDEY.layout.ConversionPattern = %d %p> %F{1}:%L %M - %m%n
# Another format, no date but full path to the file.
#log4perl.appender.SPIDEY.layout.ConversionPattern = [%p] (%F line %L) %m%n
# Another format: [millisecs] source-filename line-number class - message newline
log4perl.appender.Main.layout.ConversionPattern = [%r] %F %L %c - %m%n

# For test or quick programs, usually developed into the main namespace.
log4perl.logger.main           = TRACE, main
# Prevent messages from bubble up further in the hierarchy,
# that is showing up into the main spidey.log.
log4perl.additivity.main       = 0
log4perl.appender.main                          = Log::Log4perl::Appender::File
log4perl.appender.main.filename                 = sub { use WWW::HtmlUnit::Spidey {NO_LOG4PERL => 1}; file 'log', 'main'; }
log4perl.appender.main.layout                   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.main.mode                     = append
log4perl.appender.main.layout.ConversionPattern = %d %p> %F{1}:%L %M - %m%n

# For configuring logging for one of your spider modules, just copy the above
# block for main, changing as a minimum logger.main with the full name of your
# module (e.g. for a package called MySpiders::Name write
# logger.MySpiders.Name) and choose a unique name for at least one appender
# (e.g. Name).  If you do not have write access to this file, just copy it
# elsewhere and specify an absolute or relative path to it at require time:
# use WWW::HtmlUnit::Spidey { LOG_CONF => 'path/to/Log4perl.conf' };
# Here is an example for a module called MySpiders::Name.

#log4perl.logger.MySpiders.Name = TRACE, Name
#log4perl.additivity.MySpiders.Name              = Log::Log4perl::Appender::File
#log4perl.appender.Name.filename                 = sub { use WWW::HtmlUnit::Spidey {NO_LOG4PERL => 1}; file 'log', 'MySpiders::Name'; }
#log4perl.appender.Name.layout                   = Log::Log4perl::Layout::PatternLayout
#log4perl.appender.Name.mode                     = append
#log4perl.appender.Name.layout.ConversionPattern = %d %p> %F{1}:%L %M - %m%n
